name: docs

on:
  push:
    branches: [dev]
    tags:
      - "v*"
      - "!v*-*"
  pull_request:
    branches: [main, dev]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # SMV needs full history/tags

      - name: Fetch all tags and branches
        run: |
          git fetch --force --tags
          git fetch --prune origin '+refs/heads/*:refs/remotes/origin/*'
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install Poetry
        run: pipx install poetry
      - name: Install dependencies (with docs group)
        run: poetry install --with docs
      - name: Discover latest stable tag
        id: stable
        shell: bash
        run: |
          set -euo pipefail
          LATEST=$(git tag -l 'v[0-9]*' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | tail -n1 || true)
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
      - name: Build Sphinx (multi-version)
        run: |
          if [ -n "${{ steps.stable.outputs.latest }}" ]; then
            echo "Building dev and ${{ steps.stable.outputs.latest }}"
            poetry run sphinx-multiversion docs/source docs/build/html \
              -D 'smv_tag_whitelist="^${{ steps.stable.outputs.latest }}$"' \
              -D 'smv_branch_whitelist="^(dev)$"'
          else
            echo "No stable tag found; building dev only"
            poetry run sphinx-multiversion docs/source docs/build/html \
              -D 'smv_tag_whitelist="^$"' \
              -D 'smv_branch_whitelist="^(dev)$"'
          fi
      - name: Create 'stable' alias and root redirect
        shell: bash
        run: |
          set -euxo pipefail
          cd docs/build/html
          touch .nojekyll
          LATEST="${{ steps.stable.outputs.latest }}"
          if [[ -n "$LATEST" && -d "$LATEST" ]]; then
            rm -rf stable && cp -R "$LATEST" stable
          elif [[ -d dev ]]; then
            rm -rf stable && cp -R dev stable
          fi
          cat > index.html <<'HTML'
          <!doctype html><meta charset="utf-8">
          <meta http-eqiv="refresh" content="0; url=./stable/">
          <title>Redirecting to stable docs...</title>
          <a href="./stable/">Click here if you're not redirected.</a>
          HTML
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/build/html

  deploy:
    if: ${{ github.event_name == 'push' }}
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
